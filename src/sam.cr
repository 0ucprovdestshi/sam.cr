require "./sam/*"

module Sam
  extend Execution

  # Task separation symbol used in command line.
  TASK_SEPARATOR = "@"

  @@root_namespace = Namespace.new("root", nil)

  # :nodoc:
  def self.root_namespace
    @@root_namespace
  end

  def self.namespace(name : String)
    n = @@root_namespace.touch_namespace(name)
    with n yield
  end

  def self.desc(description)
    @@root_namespace.desc(description)
  end

  # delegates call to root namespace
  def self.task(name, dependencies = [] of String, &block : Task, Args -> Void)
    @@root_namespace.task(name, dependencies, &block)
  end

  def self.find(path : String)
    @@root_namespace.find(path)
  end

  def self.invoke(name, args : Array(String))
    invoke(name, Args.new(args))
  end

  def self.help
    return puts "Hm, nothing to do..." if ARGV.empty?

    process_tasks(ARGV.clone)
  rescue e : NotFound
    puts e.message
    exit 1
  rescue e
    puts e.backtrace.join("\n"), e
    exit 1
  end

  # :nodoc:
  def self.process_tasks(args)
    while (definition = read_task(args))
      invoke(*definition)
    end
  end

  def self.pretty_print
    tasks = @@root_namespace.all_tasks
    paths = tasks.map(&.path)
    max_length = paths.map(&.size).max
    puts "Tasks:"
    puts "-" * (max_length + 2) + ":" + "-" * 20
    tasks.each_with_index do |task, i|
      puts paths[i].ljust(max_length + 5) + task.description
    end
  end

  def self.generate_makefile(sam_path)
    file_path = "Makefile"
    delimiter = "# === Sam shortcut"
    if File.exists?(file_path)
      ignore = false
      shortcut = false
      content = String.build do |io|
        File.read_lines(file_path).each do |line|
          if line.starts_with?(delimiter)
            shortcut = true
            ignore = !ignore
            next
          end
          io << line << "\n" unless ignore
        end
        io << makefile_template(sam_path, delimiter)
      end
      File.write(file_path, content)
    else
      File.write(file_path, makefile_template(sam_path, delimiter))
    end
  end

  private def self.read_task(args : Array(String))
    return if args.empty?

    args.shift if args[0] == TASK_SEPARATOR
    task = args.shift
    task_args = args.take_while { |argument| argument != TASK_SEPARATOR }
    args.shift(task_args.size)
    {task, task_args}
  end

  private def self.makefile_template(sam_path, delimiter)
    <<-MAKEFILE
    #{delimiter}
    # next lines are autogenerated and any changes will be discarded after regenerating
    CRYSTAL_BIN ?= `which crystal`
    SAM_PATH ?= "#{sam_path}"
    .PHONY: sam
    sam:
    \t$(CRYSTAL_BIN) $(SAM_PATH) $(filter-out $@,$(MAKECMDGOALS))
    %:
    \t@:
    #{delimiter}\n
    MAKEFILE
  end
end
