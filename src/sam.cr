require "./sam/*"

module Sam
  # Task separation symbol used in command line.
  TASK_SEPARATOR = "@"

  @@root_namespace = Namespace.new("root", nil)

  # :nodoc:
  def self.root_namespace
    @@root_namespace
  end

  def self.namespace(name : String)
    n = @@root_namespace.touch_namespace(name)
    with n yield
  end

  def self.desc(description)
    @@root_namespace.desc(description)
  end

  # delegates call to root namespace
  def self.task(name, dependencies = [] of String, &block : Task, Args -> Void)
    @@root_namespace.task(name, dependencies, &block)
  end

  def self.invoke(name)
    invoke(name, Args.new)
  end

  def self.invoke(name, args : Args)
    t = find(name)
    raise "Task #{name} was not found" unless t

    t.not_nil!.call(args)
  end

  def self.invoke(name, args : Array(String))
    t = find(name)
    raise "Task #{name} was not found" unless t

    t.not_nil!.call(Args.new(args))
  end

  def self.find(path)
    @@root_namespace.find(path)
  end

  def self.find!(path)
    @@root_namespace.find(path).not_nil!
  end

  def self.help
    if ARGV.size > 0
      process_tasks(ARGV)
    else
      puts "Hm, nothing to do..."
    end
  rescue e
    puts e.backtrace.join("\n"), e
    exit 1
  end

  # :nodoc:
  def self.process_tasks(args)
    separator_indexes = args.map_with_index { |a, i| i if a == TASK_SEPARATOR }.compact
    sets = [] of Array(String)
    previous_index = 0
    separator_indexes.each do |i|
      sets << args[previous_index...i]
      previous_index = i + 1
    end
    sets << args[previous_index..-1]

    sets.each do |set|
      Sam.invoke(set[0], set[1..-1])
    end
  end

  def self.pretty_print
    descs = [] of String
    tasks = @@root_namespace.all_tasks
    paths = tasks.map(&.path)
    max_length = paths.map(&.size).max
    puts "Tasks:"
    puts "-" * (max_length + 2) + ":" + "-" * 20
    tasks.each_with_index do |task, i|
      puts paths[i].ljust(max_length + 5) + task.description
    end
  end

  def self.generate_makefile(sam_path)
    file_path = "Makefile"
    delimiter = "# === Sam shortcut"
    if File.exists?(file_path)
      ignore = false
      shortcut = false
      content = String.build do |io|
        File.read_lines(file_path).each do |line|
          if line.starts_with?(delimiter)
            shortcut = true
            ignore = !ignore
            next
          end
          io << line << "\n" unless ignore
        end
        io << makefile_template(sam_path, delimiter)
      end
      File.write(file_path, content)
    else
      File.write(file_path, makefile_template(sam_path, delimiter))
    end
  end

  private def self.makefile_template(sam_path, delimiter)
    <<-MAKEFILE
    #{delimiter}
    # next lines are autogenerated and any changes will be discarded after regenerating
    CRYSTAL_BIN ?= `which crystal`
    SAM_PATH ?= "#{sam_path}"
    .PHONY: sam
    sam:
    \t$(CRYSTAL_BIN) run $(SAM_PATH) -- $(filter-out $@,$(MAKECMDGOALS))
    %:
    \t@:
    #{delimiter}\n
    MAKEFILE
  end
end

require "./sam/task"
